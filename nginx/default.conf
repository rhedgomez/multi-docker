upstream client { #There is an upstream, we are calling it client(name in docker-compose: services: client and services: server)
    server client:3000;

}

upstream api {
    server api:5000;

}

#server block 
server{
    listen 80;

    #routing rules
    #if anyone goes to "/"", the setup a proxy, and essentially pass through this request,
    #to the client upstream
    location / { 
        proxy_pass http://client;
    }

    #When a request comes from a browser, with a request of '/api' we can configure nginx to trim soff /api of the request path/url; it needs to be configure using rewrite rule
    #break - means here do not try to apply any rewrite rules afte palying the first one.
    
    #route through the nginx server, that will allow a websocket connection to be made with the running react process
    #websocket connection: this like a red error you will see on network tab, when doing inspect, this happens becasue the browser,
    #and the running react inside of it, wants to get a active connection back to the development react server. So that it gets a notification
    #anytime that our source code changes telling it that the browser needs to automatically reload

    #allow websocket connection below

    location /sockjs-node {
        proxy_pass http://client; 
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        }
    location /api {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    } 

}